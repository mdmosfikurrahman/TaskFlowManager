type Department {
    id: ID!
    name: String!
    code: String
    location: String
}

input DepartmentInput {
    name: String!
    code: String
    location: String
}

type Project {
    id: ID!
    name: String!
    description: String
    startDate: String
    endDate: String
    managerName: String
}

input ProjectInput {
    name: String!
    description: String
    startDate: String
    endDate: String
    managerId: ID!
}

type Task {
    id: ID!
    title: String!
    description: String
    status: String
    dueDate: String
    assignedToName: String
    projectName: String
}

input TaskInput {
    title: String!
    description: String
    status: String
    dueDate: String
    assignedToId: ID!
    projectId: ID!
}

type User {
    id: ID!
    name: String!
    email: String!
    phone: String
    position: String
    departmentName: String
}

input UserInput {
    name: String!
    email: String!
    phone: String
    position: String
    departmentId: ID!
}

type Query {
    getDepartments: [Department!]!
    getDepartmentById(id: ID!): Department

    getProjects: [Project!]!
    getProjectById(id: ID!): Project

    getTasks: [Task!]!
    getTaskById(id: ID!): Task

    getUsers: [User!]!
    getUserById(id: ID!): User
}

type Mutation {
    createDepartment(input: DepartmentInput!): Department!
    updateDepartment(id: ID!, input: DepartmentInput!): Department!
    deleteDepartment(id: ID!): Boolean!

    createProject(input: ProjectInput!): Project!
    updateProject(id: ID!, input: ProjectInput!): Project!
    deleteProject(id: ID!): Boolean!

    createTask(input: TaskInput!): Task!
    updateTask(id: ID!, input: TaskInput!): Task!
    deleteTask(id: ID!): Boolean!

    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!
}
